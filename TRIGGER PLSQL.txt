2)--When there is a change in acc_payable Data, please update the rem_amount against that dept_id---
 -----If rem_amount <0 then stop the transaction-----
 
 CREATE TABLE DEPT_P
 (DEPT_ID NUMBER(4) PRIMARY KEY,
 DEPT_NAME VARCHAR2(20));
 
 
 CREATE TABLE BUDGET_P
 (BUD_ID NUMBER(4) PRIMARY KEY,
 DEPT_ID REFERENCES DEPT_P(DEPT_ID),
 BUD_YEAR DATE,
 BUD_AMT NUMBER(30),
 REM_AMT NUMBER(30),
 CRT_DT DATE,
 CRT_BY VARCHAR2(20));
 
 UPDATE BUDGET_P SET REM_AMT=28920000 WHERE BUD_YEAR='20-02-2017';
 INSERT INTO BUDGET_P (BUD_ID,DEPT_ID,BUD_YEAR,BUD_AMT,REM_AMT) VALUES(SEQ_BUDGET.NEXTVAL,100,'20-02-2017',29000000,29000000);
 INSERT INTO ACC_PAYABLE_PP VALUES(SEQ_ACC_PAYABALE.NEXTVAL,'17-02-2020',100,NULL,'AB1017','INVOICE2220',60000,NULL,NULL);
 
 CREATE TABLE ACC_PAYABLE_PP
 (PAY_ID NUMBER(4) PRIMARY KEY,
 PAY_DATE DATE,
 DEPT_ID REFERENCES DEPT_P(DEPT_ID),
 EMP_ID NUMBER(5),
 SUPP_ID VARCHAR2(20),
 INVOICE_ID VARCHAR2(20),
 AMOUNT_PAID NUMBER(10));
 

 SELECT * FROM DEPT_P;
 SELECT * FROM ACC_PAYABLE_PP;
 SELECT * FROM BUDGET_P;
 
 DROP TRIGGER T_BUDGETT;
 
 -------TRIGGER CODE---------
 CREATE OR REPLACE trigger T_BUDGET
    BEFORE INSERT OR UPDATE 
    ON ACC_PAYABLE_PP
    FOR EACH ROW
    DECLARE VAR_REM_AMT BUDGET_P.REM_AMT%TYPE;
    VAR_BUDGET EXCEPTION;
    R_COUNT NUMBER(3);
 BEGIN 
    SELECT REM_AMT INTO VAR_REM_AMT FROM BUDGET_P
    WHERE DEPT_ID = :NEW.DEPT_ID;
 IF VAR_REM_AMT <0 THEN
    RAISE VAR_BUDGET;
 ELSIF INSERTING THEN
    :NEW.CRT_DATE := SYSDATE;
    :NEW.CRT_BY := USER;
    UPDATE BUDGET_P SET REM_AMT = BUD_AMT - :NEW.AMOUNT_PAID
    WHERE DEPT_ID=:NEW.DEPT_ID;
    R_COUNT := SQL%ROWCOUNT;
    dbms_output.put_line(R_COUNT);
END IF;
    EXCEPTION 
    WHEN VAR_BUDGET THEN
    DBMS_OUTPUT.PUT_LINE('NO ENOUGH MONEY TO PROCEED TRANSACTION');
END;
 
SELECT * FROM ACC_PAYABLE_PP;
